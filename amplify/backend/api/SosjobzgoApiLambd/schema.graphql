type User
  @model
  @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }]) {
  id: ID!
  name: String!
  username: String!
  email: String!

  orders: [Orders] @connection(keyName: "byUser", fields: ["id"])
  message: [Message] @connection(keyName: "byUser", fields: ["id"])
  cat: [Category] @connection(keyName: "byUser", fields: ["id"])
  messages: [Message] @connection(keyName: "byUser", fields: ["id"])
}

type Category
  @model
  @auth(
    rules: [
      { allow: owner, operations: [read] }
      { allow: private, operations: [read] }
    ]
  )
  @key(name: "byUser", fields: ["userId"]) {
  id: ID!
  name: String!
  image: String
  isActive: Boolean

  orders: [Orders] @connection(keyName: "byCat", fields: ["id"])
  messages: [Message] @connection(keyName: "byUser", fields: ["id"])

  userId: ID
  user: User @connection(fields: ["userId"])
}

type Message
  @model
  @auth(rules: [{ allow: private }])
  @key(name: "byUser", fields: ["userId"])
  @key(name: "byConversation", fields: ["conversationId"]) {
  id: ID!
  owner: String!
  message: String!

  userId: ID!
  user: User @connection(fields: ["userId"])

  conversationId: ID!
  conversation: Conversation @connection(fields: ["conversationId"])
}

type Conversation @model @auth(rules: [{ allow: private }]) {
  id: ID!
  # The participants field includes IDs of both User and Category objects
  participants: [ID!]!

  messages: [Message] @connection(keyName: "byConversation", fields: ["id"])
}

type Orders
  @model
  @auth(rules: [{ allow: private }])
  @key(name: "byUser", fields: ["userId"])
  @key(name: "byCat", fields: ["catId", "createdAt"]) {
  id: ID!
  createdAt: ID!

  category: String!
  status: String
  payment: Boolean

  geoLoc: String!
  priceRateDesc: String!
  DescOfJob: String!

  userId: ID!
  user: User @connection(fields: ["userId"])

  catId: ID!
  cat: Category @connection(fields: ["catId"])
}

type Subscription {
  onOrdersUpdated(id: ID!): Orders @aws_subscribe(mutations: ["updateOrders"])
  onCategoryUpdated(id: ID!): Category
    @aws_subscribe(mutations: ["updateCategory"])
  onMessageCreated(conversationId: ID!): Message
    @aws_subscribe(mutations: ["createMessage"])
  onConversationUpdated(id: ID!): Conversation
    @aws_subscribe(mutations: ["updateConversation"])
}
